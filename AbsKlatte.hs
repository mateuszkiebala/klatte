module AbsKlatte where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord)
instance Show Ident where
  show (Ident id) = id

data Program =
   Program [TopDef]
  deriving (Eq,Ord,Show)

data TopDef =
   FnDef Type Ident [Arg] Block
 | VarDef Type [Item]
  deriving (Eq,Ord)

instance Show TopDef where
  show (FnDef typ id args b) = show typ ++ " " ++ show id ++ " (" ++
                               show args ++ ") " ++ show b
  show (VarDef typ items) = show typ ++ " " ++ show items

data Arg =
   ValArg Type Ident
 | VarArg Type Ident
 | FunArg FunType Ident
  deriving (Eq,Ord)

instance Show Arg where
  show (ValArg typ id) = show typ ++ " " ++ show id
  show (VarArg typ id) = show typ ++ " &" ++ show id
  show (FunArg f id) = show f ++ " " ++ show id

data Block =
   Block [Stmt]
  deriving (Eq,Ord)

instance Show Block where
  show (Block b) = "{ ... }"

data Stmt =
   Empty
 | BStmt Block
 | Decl Type [Item]
 | Ass Ident Expr
 | Ret Expr
 | VRet
 | Cond Expr Stmt
 | CondElse Expr Stmt Stmt
 | While Expr Stmt
 | ForTo Type Ident Expr Expr Block
 | ForDownTo Type Ident Expr Expr Block
 | Print Expr
 | SExp Expr
  deriving (Eq,Ord)

instance Show Stmt where
  show (Empty) = "empty statement"
  show (BStmt block) = show block
  show (Decl typ items) = show typ ++ " " ++ show items
  show (Ass id e) = show id ++ " = " ++ show e
  show (Ret e) = "return " ++ show e
  show (VRet) = "void return"
  show (Cond e s) = "if (" ++ show e ++ ") " ++ show s
  show (CondElse e s1 s2) = "if (" ++ show e ++ ")" ++
                            " " ++ show s1 ++ " else " ++ show s2
  show (While e s) = "while " ++ show e ++ " " ++ show s
  show (ForTo t id e1 e2 b) = "for: " ++ show t ++ " " ++ show id ++
                               " = " ++ show e1 ++ " to " ++ show e2 ++ " " ++ show b
  show (ForDownTo t id e1 e2 b) = "for: " ++ show t ++ " " ++ show id ++
                               " = " ++ show e1 ++ " downto " ++ show e2 ++ " " ++ show b
  show (Print e) = "print " ++ show e
  show (SExp e) = show e

data Item =
   Init Ident Expr
  deriving (Eq,Ord)

instance Show Item where
  show (Init id e) = (show id) ++ " = " ++ (show e)

data Type =
   Int
 | Bool
 | Void
  deriving (Eq,Ord)

instance Show Type where
  show Int = "int"
  show Bool = "bool"
  show Void = "void"

data FunPartType =
   ValType Type
 | VarType Type
 | FType FunType
  deriving (Eq,Ord)

instance Show FunPartType where
  show (ValType typ) = show typ
  show (VarType typ) = show typ ++ "& "
  show (FType typ) = show typ

data FunType =
   Fun Type [FunPartType]
  deriving (Eq,Ord)

instance Show FunType where
  show (Fun typ types) = show typ ++ " (" ++ show types ++ " )"

data GeneralExpr =
   LExpr LamExpr
 | NExpr Expr
  deriving (Eq,Ord)

instance Show GeneralExpr where
  show (LExpr e) = "lambda: " ++ show e
  show (NExpr e) = show e

data LamExpr =
   ELam Type [Arg] Block
  deriving (Eq,Ord)

instance Show LamExpr where
  show (ELam typ args block) = show typ ++ " " ++ show args ++ " " ++ show block

data Expr =
   EVar Ident
 | ELitInt Integer
 | ELitTrue
 | ELitFalse
 | EApp Ident [GeneralExpr]
 | LApp LamExpr [GeneralExpr]
 | Neg Expr
 | Not Expr
 | EMul Expr MulOp Expr
 | EAdd Expr AddOp Expr
 | ERel Expr RelOp Expr
 | EAnd Expr Expr
 | EOr Expr Expr
  deriving (Eq,Ord)

instance Show Expr where
  show (EVar x) = show x
  show (ELitInt x) = show x
  show (ELitTrue) = "true"
  show (ELitFalse) = "false"
  show (EApp id exprs) = show id ++ " " ++ show exprs
  show (LApp lam exprs) = "lambda: " ++ show lam ++ " " ++ show exprs
  show (Neg e) = show e
  show (Not e) = show e
  show (EMul e1 op e2) = show e1 ++ " " ++ show op ++ " " ++ show e2
  show (EAdd e1 op e2) = show e1 ++ " " ++ show op ++ " " ++ show e2
  show (ERel e1 op e2) = show e1 ++ " " ++ show op ++ " " ++ show e2
  show (EAnd e1 e2) = show e1 ++ " && " ++ show e2
  show (EOr e1 e2) = show e1 ++ " || " ++ show e2

data AddOp =
   Plus
 | Minus
  deriving (Eq,Ord)

instance Show AddOp where
  show Plus = "+"
  show Minus = "-"

data MulOp =
   Times
 | Div
 | Mod
  deriving (Eq,Ord)

instance Show MulOp where
  show Times = "*"
  show Div = "/"
  show Mod = "mod"

data RelOp =
   LTH
 | LE
 | GTH
 | GE
 | EQU
 | NE
  deriving (Eq,Ord)

instance Show RelOp where
  show LTH = "<"
  show LE  = "<="
  show GTH = ">"
  show GE  = ">="
  show EQU = "=="
  show NE  = "!="
